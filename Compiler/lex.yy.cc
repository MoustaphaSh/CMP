/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 198
#define YY_END_OF_BUFFER 199
static yyconst short int yy_accept[635] =
    {   0,
      139,  139,   55,   55,   79,   79,   62,   62,   67,   67,
        0,    0,  199,  198,   34,   36,   35,   33,   18,   61,
       53,  198,   17,    9,   66,   23,   24,   15,   12,    1,
       13,   14,   16,  139,  139,    6,   25,   10,    4,   11,
        5,   20,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,   21,  152,   22,    8,  196,    2,    7,
        3,   19,   55,   57,   56,   79,   81,   80,   62,   64,
       65,  198,   67,   69,   70,  198,  197,   33,  132,   53,
       53,   53,  192,   95,   84,    0,  148,   32,    0,   42,

       38,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  158,  149,    0,  120,  157,    0,   73,  140,  147,
      155,    0,  197,  139,   59,    0,   54,   53,   77,    0,
      139,    0,    0,   89,   28,  167,  135,  133,   27,  129,
       85,  130,  169,   31,  196,  196,  196,  196,   41,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,   83,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  118,  196,  196,  196,  196,  196,  196,  196,
      144,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,    0,  194,  196,   72,    0,

      156,   43,   55,   56,   58,   79,   80,   82,   62,   63,
       67,   68,  134,  192,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  159,   91,   78,  142,  141,   30,
        0,  171,  168,  136,   29,    0,  131,    0,  170,  196,
      143,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  104,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  109,  196,  196,  196,
      196,  196,  196,  183,  196,  196,  196,  196,  153,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      178,  196,  181,  182,  196,  145,  196,  196,  196,  196,

      196,  196,  196,  196,  196,  196,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  196,  196,  189,  196,
      186,  196,   48,  196,  196,  190,  196,  196,  196,  196,
      196,  196,  196,   90,   92,  196,  196,  196,  196,  196,
      196,  102,  103,  196,  196,  196,  196,  196,  196,  115,
      196,  196,  196,  196,  196,  138,  185,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,    0,    0,    0,    0,  125,    0,    0,
        0,    0,    0,   26,  196,   39,   46,  196,   49,  196,

       50,   52,   60,  196,  196,  196,  196,  196,   94,  196,
      196,   99,  196,  196,  196,  107,  187,  196,  196,  196,
      196,  196,  196,  196,  196,  128,  196,  160,  196,  196,
      196,  196,  196,  184,  196,  196,  196,  175,  176,  179,
      193,  195,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,    0,   44,    0,    0,    0,    0,    0,   86,
        0,    0,  196,  196,  196,  196,  196,   75,  188,   93,
      196,   97,  196,  196,  196,  196,  196,  196,  114,  196,
      196,  196,  196,  196,  196,  196,  196,  162,  196,  166,
      172,  191,  174,  196,  196,  196,  196,  196,  196,  196,

      196,  196,  196,   40,    0,    0,   88,    0,    0,    0,
      180,  196,  196,  196,  196,   74,  196,  196,  196,  196,
      105,  108,  110,  196,  196,  196,  196,  196,  196,  196,
      161,  196,  164,  196,   76,  196,  196,  196,  196,  196,
      196,  196,  196,    0,   87,    0,  154,  173,   37,   47,
      196,   71,  196,  196,  196,  101,  111,  196,    0,  196,
      196,  196,  196,  196,  196,  196,  196,  106,  196,  196,
      196,  137,  196,  196,  196,   45,  126,  112,  196,  196,
      100,  196,  121,  196,  196,  196,  127,  150,  163,  196,
       51,  196,  196,  196,  196,  196,  177,   96,   98,  119,

      196,  123,    0,  196,  196,  196,  196,  146,  196,  196,
      124,  196,  196,  196,  196,  196,  122,  165,  113,  196,
      196,  196,  196,  196,  151,  196,  196,  196,  196,    0,
        0,  116,  117,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       23,   23,   23,   23,   23,   23,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,    1,   62,   63,   64,   65,

       66,   67,   37,   68,   69,   40,   41,   70,   71,   72,
       73,   74,   47,   75,   49,   76,   77,   52,   53,   78,
       55,   56,   79,   80,   81,   82,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[83] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    1,    5,
        6,    6,    6,    1,    1,    1,    1,    1,    1,    1,
        7,    7,    7,    7,    7,    7,    8,    8,    8,    8,
        8,    8,    8,    7,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    1,    9,    1,    1,
        8,    8,    7,    8,    8,    7,    8,    8,    8,    8,
        7,    8,    8,    8,    7,    8,    7,    8,   10,    1,
       11,    1
    } ;

static yyconst short int yy_base[649] =
    {   0,
        0,    0,   80,   81,   82,   83,   84,   85,   87,  101,
        0,    0, 1198, 1199, 1199,   86, 1199, 1192, 1169, 1199,
       86,   31,  102,  104, 1199,  129, 1199,  106,  107, 1199,
      130,  117,  149,  160,   95, 1171, 1199,   98,  119,  122,
     1166, 1199,  140,  145,  183,  160,  215,  195,  166,    0,
      211,  128,  200,   80,  222,  121,  238,  233,  231,  154,
       94,  168,  102, 1199, 1199, 1199,  205, 1132, 1183,  222,
     1199, 1199,    0, 1199,  155,    0, 1199,  202,    0, 1199,
     1199, 1184,    0, 1199, 1199, 1178,  258, 1184, 1161,    0,
      222, 1167,    0,    0, 1199,  247, 1199, 1199,  284, 1199,

     1199,  215,  239,  247,  252,  251,  264,  263,  250,  260,
      304,  308, 1199,  310, 1199, 1199,  311, 1199,  296, 1199,
     1199,  316,  321,  323, 1199,  320, 1171,  322, 1199,  327,
      332,  222,    0, 1199, 1158,  331, 1156, 1199,   92, 1156,
     1199, 1199,  329, 1199,    0, 1133,  276,  285,    0,  294,
      293,  302,  319,  311,  332,  334,  320,  337,  331,  321,
      337, 1132,  325,  343,  349,  337,  330,  336,  335,  340,
      341,  340,    0,  345,  382, 1131, 1130,  349,  357, 1125,
        0,  378,  371,  377,  375,  387,  383,  381,  395, 1128,
      395,  385,  386,  388,  402,  437, 1199,  436, 1199,  438,

     1199, 1199,    0, 1161, 1199,    0, 1160, 1199,    0, 1199,
        0, 1199, 1199,    0,  391,  400,  390,  409,  409, 1134,
      409,  427, 1124,  471, 1199,  474, 1199,  462,    0, 1199,
      482, 1199, 1199, 1199, 1199, 1104, 1199,  483, 1199,  439,
        0,  459,  449,  461,  459,  454,  460,  464,  455,  457,
     1122,  467,  464,  474,  486,    0,  486,  477,  485,  479,
      507,  488,  481,  498,  503,  504,  501,  504,  506,  497,
      503,  505,  502,  518,  519,  511, 1133,  524,    0,  519,
      512,  535,  529,  530,  534,  536,  544,  539,  547,  554,
        0,  544,    0,    0,  552,    0,  554,  555,  559,  560,

      564,  561,  566,  571,  556,  572,  577,  572,  584,  586,
      605,  583,  585,  582,  600, 1095,  588, 1113,    0, 1126,
        0,  607,    0,  605,  608,    0, 1117,  609,  600,  613,
      615,  602,  614,    0,  618, 1110,  619,  613,  623, 1111,
      623,    0,    0,  616,  622,  617,  634,  618,  639,    0,
      639,  627,  664,  614,  630,    0,    0, 1114,  631,  652,
      662,  663,  664,  650,  658,  670,  666,  667, 1109,  661,
      665,  677,  679,  685,  670,  678,  677,  680,  681,  680,
      677,  686,  704, 1106,  705,  694,  692, 1199, 1123,  713,
     1145,  710,  705, 1199,  725,    0,    0,  726,    0,  709,

        0,    0,    0,  716,  715,  715,  726,  726,    0,  734,
      721,    0,  731,  733,  739,  733,    0,  741,  737,  737,
      737,  744,  739,  753,  750,    0,  748,    0,  745,  764,
      766,  762,  757,    0,  779, 1121,  776,    0,    0,    0,
        0,    0, 1108, 1093,  781,  785,  763,  769,  785,  785,
      789,  787, 1139, 1199,  796,  796, 1132,  797,  783, 1199,
     1104, 1125,  801,  794,  799,  784,  805,    0,    0,    0,
      799,  807,  796,  806, 1086, 1074,  812,  809,    0,  817,
      822,  827,  832,  836,  839,  839,  827,    0,  840,    0,
        0,    0,    0, 1079, 1059, 1056,  828, 1048, 1045, 1039,

      834, 1039,  834, 1199,  837, 1016, 1199,  837, 1010, 1007,
     1199,  837,  851,  845,  854,    0,  861,  862,  861,  860,
        0,    0,    0,  855,  856,  883,  867,  863,  878,  881,
        0,  880,  958,  957,    0,  956,  880,  883,  888,  949,
      888,  883,  948,  993, 1199,  992, 1199, 1199,    0,    0,
      886,    0,  884,  898,  896,    0,    0,  885,  991,  892,
      893,  903,  905,  906,  909,  903,  764,    0,  905,  906,
      909,    0,  656,  924,  584, 1199, 1199,    0,  921,  922,
        0,  432, 1199,  919,  931,  431,    0,    0,    0,  924,
        0,  925,  930,  932,  377,  944,    0,    0,    0,    0,

      947,    0,  371,  948,  321,  939,  942,    0,  948,  949,
     1199,  954,  246,  953,  954,  244,    0,    0,    0,  957,
      958,  163,  959,  960,    0,  954,  956,  196,  194,  172,
      123, 1199, 1199, 1199, 1031, 1042, 1053, 1064, 1075, 1086,
     1091, 1096, 1104, 1115, 1126, 1137, 1143, 1145
    } ;

static yyconst short int yy_def[649] =
    {   0,
      634,    1,  635,  635,  636,  636,  637,  637,  638,  638,
      639,  639,  634,  634,  634,  634,  634,  634,  634,  634,
      640,  641,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  634,  634,  634,  634,  642,  634,  634,
      634,  634,  643,  634,  634,  644,  634,  634,  645,  634,
      634,  634,  646,  634,  634,  634,  634,  634,  634,  640,
      640,  640,  647,  647,  634,  634,  634,  634,  634,  634,

      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  640,  634,  634,
      634,  634,  648,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  634,  634,  642,  634,  634,

      634,  634,  643,  634,  634,  644,  634,  634,  645,  634,
      646,  634,  634,  647,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  648,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  642,  642,  642,  642,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  642,  642,  642,  642,  642,  642,

      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  642,  634,  634,  634,  634,  634,  634,  634,
      634,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  634,  634,  634,  634,  634,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  634,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  634,  634,  642,  642,  642,
      642,  642,  634,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  634,  642,  642,  642,  642,  642,  642,  642,
      634,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  634,
      634,  634,  634,    0,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634
    } ;

static yyconst short int yy_nxt[1282] =
    {   0,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   50,
       50,   52,   50,   53,   54,   55,   50,   56,   57,   58,
       59,   60,   61,   62,   63,   50,   64,   65,   66,   67,
       68,   43,   44,   45,   46,   47,   48,   50,   51,   52,
       50,   53,   54,   55,   56,   58,   59,   62,   69,   70,
       71,   72,   74,   74,   77,   77,   80,   80,   87,   84,
       81,   81,   94,   91,   75,   75,   78,   78,   85,   14,

       14,   14,   14,   84,   87,   92,   96,  135,   99,   95,
      111,  114,   85,  130,  100,  131,  131,  131,  235,   87,
      112,  122,  115,  136,  137,  138,  139,  181,   97,   98,
      101,  193,  113,  116,  117,  123,  633,  124,  124,  124,
      195,   82,   82,  125,   86,  140,  141,  118,  142,  143,
      119,  119,  119,  126,  181,  184,  120,  121,   86,  102,
      103,  193,  104,  127,  105,  236,  177,  106,  128,  204,
      195,  146,  178,  107,  205,  129,  108,  109,  130,  110,
      131,  131,  131,  147,  192,  632,  184,  148,  149,  150,
      102,  103,  151,  104,  158,  105,  177,  106,  159,  152,

      178,  107,  146,  108,  160,  110,  631,  171,  630,  196,
      172,  147,  194,  153,  148,  192,  207,  150,  154,  151,
      155,  208,  132,  625,  156,  158,  200,  157,  159,   91,
      179,  197,  160,  167,  180,  171,  168,  133,  172,  169,
      194,   92,  228,  228,  153,  170,  173,  161,  201,  154,
      155,   96,  156,  174,  175,  157,  162,  163,  164,  176,
       87,  179,  215,  167,  168,  180,  165,  169,  166,  182,
      188,  170,  183,   97,  190,  185,   87,  173,  161,  191,
      189,  174,  175,  216,  162,  163,  164,  186,   99,  215,
      187,  217,  166,  218,  219,  220,  182,  221,  183,  222,

      188,  202,  190,  223,  622,  185,  619,  189,  111,  241,
      101,  216,  224,  186,  114,  117,  119,  119,  119,  217,
      122,  218,  219,   87,  126,  222,  220,  244,  221,   91,
      113,  223,  242,  238,  225,  231,  116,  120,  243,  226,
      241,   92,  125,  124,  124,  124,  129,  124,  124,  124,
      130,  245,  131,  131,  131,  239,  232,  233,  244,  242,
      246,  249,  250,  253,  251,  256,  243,  247,  248,  254,
      260,  257,  255,  265,  258,  263,  261,  245,  252,  262,
      266,  613,  267,  268,  611,  269,  264,  249,  246,  270,
      271,  253,  277,  250,  248,  251,  256,  257,  260,  278,

      254,  265,  282,  255,  258,  263,  252,  261,  266,  267,
      262,  268,  264,  269,  272,  270,  280,  286,  271,  285,
      277,  288,  281,  283,  295,  290,  284,  278,  289,  293,
      273,  274,  294,  282,  287,  296,  297,  608,  307,  313,
      309,  196,  200,  603,  308,  272,  280,  285,  286,  291,
      281,  288,  284,  310,  295,  289,  290,  274,  311,  294,
      293,  287,  296,  197,  201,  307,  309,  297,  298,  299,
      313,  300,  308,  301,  314,  224,   87,  302,  303,  304,
      600,  310,  228,  228,  311,  305,  231,  238,  317,  318,
      319,  320,   87,  321,  323,  322,  324,  225,  325,  298,

      299,  314,  300,  306,  326,  302,  303,  304,  233,  239,
      328,  305,  329,  330,  317,  331,  332,  333,  319,  335,
      318,  334,  320,  322,  321,  323,  325,  324,  336,  342,
      343,  326,  344,  345,  346,  347,  348,  349,  328,  330,
      337,  350,  338,  331,  351,  339,  352,  332,  333,  334,
      335,  353,  354,  355,  336,  340,  343,  342,  358,  341,
      356,  361,  359,  344,  345,  346,  347,  348,  349,  350,
      360,  337,  351,  338,  352,  339,  362,  353,  371,  363,
      364,  365,  367,  354,  355,  366,  356,  361,  368,  358,
      359,  369,  370,  372,  378,  373,  374,  375,  376,  380,

      381,  382,  379,  383,  362,  363,  364,  384,  365,  371,
      377,  366,  367,  385,  368,  386,  387,  390,  388,  369,
      392,  372,  370,  373,  374,  379,  391,  375,  376,  380,
      383,  381,  382,  379,  393,  395,  377,  398,  384,  389,
      400,  385,  399,  402,  597,  405,  386,  387,  390,  403,
      392,  404,  406,  410,  391,  407,  408,  411,  412,  415,
      414,  425,  395,  416,  418,  393,  417,  419,  398,  420,
      389,  400,  399,  421,  402,  403,  405,  422,  406,  426,
      428,  404,  429,  407,  410,  411,  408,  415,  425,  412,
      414,  416,  417,  419,  423,  418,  430,  433,  424,  437,

      420,  431,  432,  422,  421,  426,  428,  434,  435,  436,
      439,  441,  442,  429,  440,  443,  595,  444,  454,  445,
      446,  447,  448,  449,  433,  423,  450,  430,  451,  424,
      437,  431,  432,  434,  452,  456,  439,  436,  435,  455,
      440,  457,  441,  442,  444,  459,  443,  445,  446,  448,
      448,  449,  450,  461,  462,  463,  451,  464,  465,  466,
      469,  470,  467,  456,  468,  452,  471,  457,  472,  473,
      455,  474,  475,  477,  476,  478,  459,  481,  479,  480,
      462,  461,  482,  483,  465,  484,  463,  466,  464,  467,
      468,  469,  470,  485,  486,  472,  487,  471,  488,  473,

      490,  474,  476,  475,  477,  478,  479,  480,  481,  489,
      482,  491,  498,  493,  483,  496,  484,  497,  499,  500,
      486,  485,  501,  502,  591,  503,  505,  487,  490,  488,
      506,  508,  509,  512,  515,  513,  489,  514,  499,  516,
      517,  518,  491,  493,  499,  519,  496,  520,  497,  523,
      500,  525,  501,  524,  502,  503,  526,  505,  509,  527,
      515,  506,  508,  513,  512,  528,  529,  514,  517,  530,
      516,  519,  518,  531,  533,  520,  532,  537,  541,  523,
      544,  524,  525,  543,  546,  550,  549,  526,  552,  551,
      527,  553,  554,  555,  556,  559,  528,  529,  557,  558,

      530,  561,  532,  537,  531,  533,  541,  562,  544,  543,
      563,  546,  549,  564,  565,  570,  550,  551,  569,  552,
      571,  573,  553,  554,  555,  556,  557,  558,  574,  578,
      580,  579,  561,  581,  582,  562,  584,  585,  586,  587,
      588,  563,  589,  560,  564,  565,  571,  590,  569,  592,
      593,  571,  573,  594,  596,  598,  574,  578,  579,  599,
      582,  580,  601,  581,  584,  585,  602,  604,  605,  586,
      587,  588,  606,  589,  607,  590,  609,  592,  594,  610,
      612,  594,  616,  617,  614,  596,  598,  615,  618,  599,
      601,  620,  621,  626,  627,  604,  605,  602,  623,  624,

      607,  628,  607,  629,  583,  577,  576,  609,  575,  572,
      610,  612,  615,  616,  617,  615,  568,  567,  566,  618,
      548,  621,  621,  547,  627,  627,  624,  624,  629,  545,
      629,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   90,  542,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   93,   93,  540,

       93,  145,  145,  145,  203,  539,  203,  203,  538,  203,
      203,  203,  203,  203,  203,  206,  536,  206,  206,  535,
      206,  206,  206,  206,  206,  206,  209,  534,  522,  209,
      209,  209,  209,  209,  521,  209,  209,  211,  511,  211,
      510,  211,  211,  211,  211,  507,  211,  211,  214,  214,
      214,  229,  504,  495,  229,  229,  494,  492,  460,  458,
      453,  438,  427,  413,  409,  401,  397,  396,  394,  357,
      327,  316,  315,  312,  207,  204,  292,  279,  276,  275,
      259,  240,  237,  234,  230,  227,   91,  213,   88,  212,
      210,  199,  198,  144,  134,   89,   88,  634,   13,  634,

      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634
    } ;

static yyconst short int yy_chk[1282] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,    5,    6,    7,    8,   16,    9,
        7,    8,   22,   21,    3,    4,    5,    6,    9,    3,

        4,    5,    6,   10,   16,   21,   23,   38,   24,   22,
       28,   29,   10,   35,   24,   35,   35,   35,  139,   32,
       28,   32,   29,   38,   38,   38,   38,   54,   23,   23,
       24,   61,   28,   29,   31,   32,  631,   32,   32,   32,
       63,    7,    8,   32,    9,   39,   39,   31,   40,   40,
       31,   31,   31,   33,   54,   56,   31,   31,   10,   26,
       26,   61,   26,   33,   26,  139,   52,   26,   33,   75,
       63,   43,   52,   26,   75,   33,   26,   26,   34,   26,
       34,   34,   34,   43,   60,  630,   56,   43,   43,   44,
       26,   26,   44,   26,   46,   26,   52,   26,   46,   44,

       52,   26,   43,   26,   46,   26,  629,   49,  628,   67,
       49,   43,   62,   45,   43,   60,   78,   44,   45,   44,
       45,   78,   34,  622,   45,   46,   70,   45,   46,   91,
       53,   67,   46,   48,   53,   49,   48,   34,   49,   48,
       62,   91,  132,  132,   45,   48,   51,   47,   70,   45,
       45,   96,   45,   51,   51,   45,   47,   47,   47,   51,
       87,   53,  102,   48,   48,   53,   47,   48,   47,   55,
       58,   48,   55,   96,   59,   57,   87,   51,   47,   59,
       58,   51,   51,  103,   47,   47,   47,   57,   99,  102,
       57,  104,   47,  105,  106,  107,   55,  108,   55,  109,

       58,   70,   59,  110,  616,   57,  613,   58,  111,  147,
       99,  103,  112,   57,  114,  117,  119,  119,  119,  104,
      122,  105,  106,  123,  126,  109,  107,  151,  108,  128,
      111,  110,  148,  143,  112,  136,  114,  117,  150,  123,
      147,  128,  122,  124,  124,  124,  126,  130,  130,  130,
      131,  152,  131,  131,  131,  143,  136,  136,  151,  148,
      153,  154,  155,  157,  156,  159,  150,  153,  153,  158,
      163,  160,  158,  167,  161,  166,  164,  152,  156,  165,
      168,  605,  169,  170,  603,  171,  166,  154,  153,  172,
      174,  157,  178,  155,  153,  156,  159,  160,  163,  179,

      158,  167,  183,  158,  161,  166,  156,  164,  168,  169,
      165,  170,  166,  171,  175,  172,  182,  186,  174,  185,
      178,  187,  182,  184,  193,  189,  184,  179,  188,  191,
      175,  175,  192,  183,  186,  194,  195,  595,  215,  221,
      217,  196,  200,  586,  216,  175,  182,  185,  186,  189,
      182,  187,  184,  218,  193,  188,  189,  175,  219,  192,
      191,  186,  194,  196,  200,  215,  217,  195,  198,  198,
      221,  198,  216,  198,  222,  224,  226,  198,  198,  198,
      582,  218,  228,  228,  219,  198,  231,  238,  240,  242,
      243,  244,  226,  245,  247,  246,  248,  224,  249,  198,

      198,  222,  198,  198,  250,  198,  198,  198,  231,  238,
      252,  198,  253,  253,  240,  254,  255,  257,  243,  259,
      242,  258,  244,  246,  245,  247,  249,  248,  260,  262,
      263,  250,  264,  265,  266,  267,  268,  269,  252,  253,
      261,  270,  261,  254,  271,  261,  272,  255,  257,  258,
      259,  273,  274,  275,  260,  261,  263,  262,  278,  261,
      276,  281,  280,  264,  265,  266,  267,  268,  269,  270,
      280,  261,  271,  261,  272,  261,  282,  273,  292,  283,
      284,  285,  287,  274,  275,  286,  276,  281,  288,  278,
      280,  289,  290,  295,  301,  297,  298,  299,  300,  302,

      303,  304,  306,  305,  282,  283,  284,  307,  285,  292,
      300,  286,  287,  308,  288,  309,  310,  312,  311,  289,
      314,  295,  290,  297,  298,  301,  313,  299,  300,  302,
      305,  303,  304,  306,  315,  317,  300,  322,  307,  311,
      325,  308,  324,  328,  575,  331,  309,  310,  312,  329,
      314,  330,  332,  337,  313,  333,  335,  338,  339,  344,
      341,  354,  317,  345,  347,  315,  346,  348,  322,  349,
      311,  325,  324,  351,  328,  329,  331,  352,  332,  355,
      359,  330,  360,  333,  337,  338,  335,  344,  354,  339,
      341,  345,  346,  348,  353,  347,  361,  364,  353,  368,

      349,  362,  363,  352,  351,  355,  359,  365,  366,  367,
      370,  372,  373,  360,  371,  374,  573,  375,  385,  376,
      377,  378,  379,  380,  364,  353,  381,  361,  382,  353,
      368,  362,  363,  365,  383,  386,  370,  367,  366,  385,
      371,  387,  372,  373,  375,  390,  374,  376,  377,  378,
      379,  380,  381,  392,  393,  395,  382,  398,  400,  404,
      407,  408,  405,  386,  406,  383,  410,  387,  411,  413,
      385,  414,  415,  418,  416,  419,  390,  422,  420,  421,
      393,  392,  423,  424,  400,  425,  395,  404,  398,  405,
      406,  407,  408,  427,  429,  411,  430,  410,  431,  413,

      433,  414,  416,  415,  418,  419,  420,  421,  422,  432,
      423,  435,  447,  437,  424,  445,  425,  446,  448,  449,
      429,  427,  450,  451,  567,  452,  455,  430,  433,  431,
      456,  458,  459,  463,  466,  464,  432,  465,  447,  467,
      471,  472,  435,  437,  448,  473,  445,  474,  446,  477,
      449,  480,  450,  478,  451,  452,  481,  455,  459,  482,
      466,  456,  458,  464,  463,  483,  484,  465,  471,  485,
      467,  473,  472,  486,  489,  474,  487,  497,  501,  477,
      505,  478,  480,  503,  508,  513,  512,  481,  515,  514,
      482,  517,  518,  519,  520,  526,  483,  484,  524,  525,

      485,  527,  487,  497,  486,  489,  501,  528,  505,  503,
      529,  508,  512,  530,  532,  538,  513,  514,  537,  515,
      539,  541,  517,  518,  519,  520,  524,  525,  542,  551,
      554,  553,  527,  555,  558,  528,  560,  561,  562,  563,
      564,  529,  565,  526,  530,  532,  538,  566,  537,  569,
      570,  539,  541,  571,  574,  579,  542,  551,  553,  580,
      558,  554,  584,  555,  560,  561,  585,  590,  592,  562,
      563,  564,  593,  565,  594,  566,  596,  569,  570,  601,
      604,  571,  609,  610,  606,  574,  579,  607,  612,  580,
      584,  614,  615,  623,  624,  590,  592,  585,  620,  621,

      593,  626,  594,  627,  559,  546,  544,  596,  543,  540,
      601,  604,  606,  609,  610,  607,  536,  534,  533,  612,
      510,  614,  615,  509,  623,  624,  620,  621,  626,  506,
      627,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  640,  502,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  641,  641,  500,

      641,  642,  642,  642,  643,  499,  643,  643,  498,  643,
      643,  643,  643,  643,  643,  644,  496,  644,  644,  495,
      644,  644,  644,  644,  644,  644,  645,  494,  476,  645,
      645,  645,  645,  645,  475,  645,  645,  646,  462,  646,
      461,  646,  646,  646,  646,  457,  646,  646,  647,  647,
      647,  648,  453,  444,  648,  648,  443,  436,  391,  389,
      384,  369,  358,  340,  336,  327,  320,  318,  316,  277,
      251,  236,  223,  220,  207,  204,  190,  180,  177,  176,
      162,  146,  140,  137,  135,  127,   92,   89,   88,   86,
       82,   69,   68,   41,   36,   19,   18,   13,  634,  634,

      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "D:\\Compiler\\CMP\\Compiler\\lex.l"
#define INITIAL 0
#line 2 "D:\\Compiler\\CMP\\Compiler\\lex.l"
		#include "yacc.hpp";
		#include <iostream>
		#include <istream>
		#include <ostream>
		#include <fstream>
		#include <string>		
		#include <FlexLexer.h>	
		ofstream outlex("D:\\Compiler\\CMP\\Compiler\\Compiler\\outlex.txt");
		int lineNo = 1;
		int colNo = 0;
		int i;
#define multilinecomment 1
#define DOCmultilinecomment 2

#define String_Double 3
#define String_Single 4

#define PHP 5

#line 842 "lex.yy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 53 "D:\\Compiler\\CMP\\Compiler\\lex.l"


#line 972 "lex.yy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 635 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1199 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 55 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<", "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<"{ "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 65 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<"} "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 70 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<"= "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 75 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<"? "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 80 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<": "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 85 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<"| "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 90 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<"^ "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 95 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<"& "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 100 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<"< "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 105 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<"> "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 110 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<"+ "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 115 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<"- "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 120 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<". "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 125 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<"* "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 130 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<"/ "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 135 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<"% "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 140 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<"! "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 145 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<"~ "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 150 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<"@ "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 155 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<"[ "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 160 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<"] "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 165 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<"( "<<lineNo<<" "<<colNo<<"\n";
													return left_arc;
												}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 170 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<") "<<lineNo<<" "<<colNo<<"\n";
													return right_arc;
												}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 175 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
													outlex<<"; "<<lineNo<<" "<<colNo<<"\n";
													return yytext[0];
												}
	YY_BREAK
case 26:
#line 181 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 27:
#line 182 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 28:
YY_RULE_SETUP
#line 182 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	
													yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"<?php "<<lineNo<<" "<<colNo<<"\n";
													return T_OPEN_TAG;
												}
	YY_BREAK
case 29:
#line 194 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 30:
YY_RULE_SETUP
#line 194 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	
													yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"<?= "<<lineNo<<" "<<colNo<<"\n";
													return T_OPEN_TAG_WITH_ECHO;
												}
	YY_BREAK
case 31:
#line 206 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 32:
YY_RULE_SETUP
#line 206 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"colse_tag "<<lineNo<<" "<<colNo<<"\n";
													return T_CLOSE_TAG;
												}
	YY_BREAK
case 33:
#line 218 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 34:
#line 219 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 35:
YY_RULE_SETUP
#line 219 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo += strlen(yytext);
												}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 222 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	colNo=0;
													lineNo++;
												}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 226 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"abstract "<<lineNo<<" "<<colNo<<"\n"; 
													return T_ABSTRACT;
												}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 236 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"&= "<<lineNo<<" "<<colNo<<"\n";
													return T_AND_EQUAL;
												}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 246 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"array() "<<lineNo<<" "<<colNo<<"\n";
													return T_ARRAY;
												}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 256 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"(array) "<<lineNo<<" "<<colNo<<"\n";
													return T_ARRAY_CAST;
												}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 266 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"as "<<lineNo<<" "<<colNo<<"\n";
													return T_AS;
												}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 276 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"&& "<<lineNo<<" "<<colNo<<"\n";
													return T_BOOLEAN_AND;
												}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 286 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"|| "<<lineNo<<" "<<colNo<<"\n";
													return T_BOOLEAN_OR;
												}
	YY_BREAK
case 44:
#line 297 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 45:
YY_RULE_SETUP
#line 297 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"(bool) "<<lineNo<<" "<<colNo<<"\n";
													return T_BOOL_CAST;
												}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 307 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"break "<<lineNo<<" "<<colNo<<"\n";
													return T_BREAK;
												}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 317 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"callable "<<lineNo<<" "<<colNo<<"\n";
													return T_CALLABLE;
												}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 327 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"case "<<lineNo<<" "<<colNo<<"\n";
													return T_CASE;
												}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 337 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"catch "<<lineNo<<" "<<colNo<<"\n";
													return T_CATCH;
												}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 347 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"class "<<lineNo<<" "<<colNo<<"\n";
													return T_CLASS;
												}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 357 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"__CLASS__ "<<lineNo<<" "<<colNo<<"\n";
													return T_CLASS_C;
												}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 367 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"clone "<<lineNo<<" "<<colNo<<"\n";
													return T_CLONE;
												}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 378 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"comment "<<lineNo++;
												}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 386 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	BEGIN multilinecomment;
													yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;	
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
												}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 394 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
												}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 397 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
												}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 400 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	strcat(yylval.r.str, yytext);
													colNo =0;
													lineNo++;
												}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 404 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	BEGIN INITIAL;
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"comment "<<lineNo<<" "<<colNo<<"\n";
												}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 410 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<".= "<<lineNo<<" "<<colNo<<"\n";
													return T_CONCAT_EQUAL;
												}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 420 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"const "<<lineNo<<" "<<colNo<<"\n";
													return T_CONST;
												}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 430 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	BEGIN String_Double;
													yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;	
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
												}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 438 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
												}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 441 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
												}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 444 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	strcat(yylval.r.str, yytext);
													colNo =0;
													lineNo++;
												}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 448 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	BEGIN INITIAL;
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"string"<<yylval.r.str<<" "<<lineNo<<" "<<colNo<<"\n";
													return T_CONSTANT_ENCAPSED_STRING;
												}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 455 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	BEGIN String_Single;
													yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;	
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
												}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 463 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
												}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 466 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
												}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 469 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	strcat(yylval.r.str, yytext);
													colNo =0;
													lineNo++;
												}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 473 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	BEGIN INITIAL;
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"string"<<yylval.r.str<<" "<<lineNo<<" "<<colNo<<"\n";
													return T_CONSTANT_ENCAPSED_STRING;
												}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 480 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"continue "<<lineNo<<" "<<colNo<<"\n";
													return T_CONTINUE;
												}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 490 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"{$ "<<lineNo<<" "<<colNo<<"\n";
													return T_CURLY_OPEN;
												}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 500 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"-- "<<lineNo<<" "<<colNo<<"\n";
													return T_DEC;
												}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 510 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"declare "<<lineNo<<" "<<colNo<<"\n";
													return T_DECLARE;
												}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 520 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"default "<<lineNo<<" "<<colNo<<"\n";
													return T_DEFAULT;
												}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 530 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"__DIR__ "<<lineNo<<" "<<colNo<<"\n";
													return T_DIR;
												}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 540 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"/= "<<lineNo<<" "<<colNo<<"\n";
													return T_DIV_EQUAL;
												}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 550 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	BEGIN DOCmultilinecomment;
													yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;	
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
												}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 558 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
												}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 561 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
												}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 564 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	strcat(yylval.r.str, yytext);
													colNo =0;
													lineNo++;
												}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 568 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	BEGIN INITIAL;
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"comment "<<yylval.r.str<<" "<<lineNo<<" "<<colNo<<"\n";
												}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 574 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"do "<<lineNo<<" "<<colNo<<"\n";
													return T_DO;
												}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 584 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"${ "<<lineNo<<" "<<colNo<<"\n";
													return T_DOLLAR_OPEN_CURLY_BRACES;
												}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 594 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"=> "<<lineNo<<" "<<colNo<<"\n";
													return T_DOUBLE_ARROW;
												}
	YY_BREAK
case 86:
#line 605 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 87:
#line 606 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 88:
YY_RULE_SETUP
#line 606 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"double_cost "<<lineNo<<" "<<colNo<<"\n";
													return T_DOUBLE_CAST;
												}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 616 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<":: "<<lineNo<<" "<<colNo<<"\n";
													return T_PAAMAYIM_NEKUDOTAYIM;
												}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 626 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													colNo += strlen(yytext);
													outlex<<"echo "<<lineNo<<" "<<colNo<<"\n";
													return T_ECHO;
												}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 634 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"... "<<lineNo<<" "<<colNo<<"\n";
													return T_ELLIPSIS;
												}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 644 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"else "<<lineNo<<" "<<colNo<<"\n";
													return T_ELSE;
												}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 654 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"elseif "<<lineNo<<" "<<colNo<<"\n";
													return T_ELSEIF;
												}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 664 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													colNo += strlen(yytext);
													outlex<<"empty "<<lineNo<<" "<<colNo<<"\n";
													return T_EMPTY;
												}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 671 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"$a "<<lineNo<<" "<<colNo<<"\n";
													return T_ENCAPSED_AND_WHITESPACE;
												}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 681 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"enddeclare "<<lineNo<<" "<<colNo<<"\n";
													return T_ENDDECLARE;
												}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 691 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"endfor "<<lineNo<<" "<<colNo<<"\n";
													return T_ENDFOR;
												}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 701 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"endforeach "<<lineNo<<" "<<colNo<<"\n";
													return T_ENDFOREACH;
												}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 711 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"endif "<<lineNo<<" "<<colNo<<"\n";
													return T_ENDIF;
												}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 721 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"endswitch "<<lineNo<<" "<<colNo<<"\n";
													return T_ENDSWITCH;
												}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 731 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"endwhile "<<lineNo<<" "<<colNo<<"\n";
													return T_ENDWHILE;
												}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 741 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"eval() "<<lineNo<<" "<<colNo<<"\n";
													return T_EVAL;
												}
	YY_BREAK
case 103:
#line 752 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 104:
YY_RULE_SETUP
#line 752 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"exit "<<lineNo<<" "<<colNo<<"\n";
													return T_EXIT;
												}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 762 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"extends "<<lineNo<<" "<<colNo<<"\n";
													return T_EXTENDS;
												}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 772 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\s0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"__FILE__ "<<lineNo<<" "<<colNo<<"\n";
													return T_FILE;
												}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 782 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"final "<<lineNo<<" "<<colNo<<"\n";
													return T_FINAL;
												}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 792 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"finally "<<lineNo<<" "<<colNo<<"\n";
													return T_FINALLY;
												}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 802 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"for "<<lineNo<<" "<<colNo<<"\n";
													return T_FOR;
												}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 812 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"foreach "<<lineNo<<" "<<colNo<<"\n";
													return T_FOREACH;
												}
	YY_BREAK
case 111:
#line 823 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 112:
YY_RULE_SETUP
#line 823 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"function "<<lineNo<<" "<<colNo<<"\n";
													return T_FUNCTION;
												}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 833 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"__FUNCTION__ "<<lineNo<<" "<<colNo<<"\n";
													return T_FUNC_C;
												}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 843 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"global "<<lineNo<<" "<<colNo<<"\n";
													return T_GLOBAL;
												}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 853 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"goto "<<lineNo<<" "<<colNo<<"\n";
													return T_GOTO;
												}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 863 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"__HALT_COMPILER() "<<lineNo<<" "<<colNo<<"\n";
													return T_HALT_COMPILER;
												}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 872 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"__HALT_COMPILER() "<<lineNo<<" "<<colNo<<"\n";
													return T_HALT_COMPILER;
												}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 882 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"if "<<lineNo<<" "<<colNo<<"\n";
													return T_IF;
												}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 892 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"implements "<<lineNo<<" "<<colNo<<"\n";
													return T_IMPLEMENTS;
												}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 902 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"++ "<<lineNo<<" "<<colNo<<"\n";
													return T_INC;
												}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 912 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"include() "<<lineNo<<" "<<colNo<<"\n";
													return T_INCLUDE;
												}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 922 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"include_once "<<lineNo<<" "<<colNo<<"\n";
													return T_INCLUDE_ONCE;
												}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 932 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"instanceof "<<lineNo<<" "<<colNo<<"\n";
													return T_INSTANCEOF;
												}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 942 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"insteadof "<<lineNo<<" "<<colNo<<"\n";
													return T_INSTEADOF;
												}
	YY_BREAK
case 125:
#line 953 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 126:
YY_RULE_SETUP
#line 953 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"(int) "<<lineNo<<" "<<colNo<<"\n";
													return T_INT_CAST;
												}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 963 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"interface "<<lineNo<<" "<<colNo<<"\n";
													return T_INTERFACE;
												}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 973 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"isset() "<<lineNo<<" "<<colNo<<"\n";
													return T_ISSET;
												}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 983 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"== "<<lineNo<<" "<<colNo<<"\n";
													return T_IS_EQUAL;
												}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 993 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<">=() "<<lineNo<<" "<<colNo<<"\n";
													return T_IS_GREATER_OR_EQUAL;
												}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1003 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"=== "<<lineNo<<" "<<colNo<<"\n";
													return T_IS_IDENTICAL;
												}
	YY_BREAK
case 132:
#line 1014 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 133:
YY_RULE_SETUP
#line 1014 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"!= "<<lineNo<<" "<<colNo<<"\n";
													return T_IS_NOT_EQUAL;
												}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1024 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"!== "<<lineNo<<" "<<colNo<<"\n";
													return T_IS_NOT_IDENTICAL;
												}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1034 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"<= "<<lineNo<<" "<<colNo<<"\n";
													return T_IS_SMALLER_OR_EQUAL;
												}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1044 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"<=> "<<lineNo<<" "<<colNo<<"\n";
													return T_SPACESHIP;
												}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1054 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"__LINE__ "<<lineNo<<" "<<colNo<<"\n";
													return T_LINE;
												}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1064 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"list() "<<lineNo<<" "<<colNo<<"\n";
													return T_LIST;
												}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1074 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"dnumber "<<lineNo<<" "<<colNo<<"\n";
													return T_DNUMBER;
												}
	YY_BREAK
case 140:
#line 1085 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 141:
#line 1086 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 142:
YY_RULE_SETUP
#line 1086 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"lnumber "<<lineNo<<" "<<colNo<<"\n";
													return T_LNUMBER;
												}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1096 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"and "<<lineNo<<" "<<colNo<<"\n";
													return T_LOGICAL_AND;
												}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1106 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"or "<<lineNo<<" "<<colNo<<"\n";
													return T_LOGICAL_OR;
												}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1116 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"xor "<<lineNo<<" "<<colNo<<"\n";
													return T_LOGICAL_XOR;
												}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1126 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"__METHOD__ "<<lineNo<<" "<<colNo<<"\n";
													return T_METHOD_C;
												}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1136 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"-= "<<lineNo<<" "<<colNo<<"\n";
													return T_MINUS_EQUAL;
												}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1146 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"%= "<<lineNo<<" "<<colNo<<"\n";
													return T_MOD_EQUAL;
												}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1156 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"*= "<<lineNo<<" "<<colNo<<"\n";
													return T_MUL_EQUAL;
												}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1166 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"namespace "<<lineNo<<" "<<colNo<<"\n";
													return T_NAMESPACE;
												}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1176 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"__NAMESPACE__ "<<lineNo<<" "<<colNo<<"\n";
													return T_NS_C;
												}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1186 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"\\ "<<lineNo<<" "<<colNo<<"\n";
													return T_NS_SEPARATOR;
												}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1196 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"new "<<lineNo<<" "<<colNo<<"\n";
													return T_NEW;
												}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1206 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"(object) "<<lineNo<<" "<<colNo<<"\n";
													return T_OBJECT_CAST;
												}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1216 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"-> "<<lineNo<<" "<<colNo<<"\n";
													return T_OBJECT_OPERATOR;
												}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1226 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"|= "<<lineNo<<" "<<colNo<<"\n";
													return T_OR_EQUAL;
												}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1236 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"+= "<<lineNo<<" "<<colNo<<"\n";
													return T_PLUS_EQUAL;
												}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1246 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"** "<<lineNo<<" "<<colNo<<"\n";
													return T_POW;
												}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1256 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"**= "<<lineNo<<" "<<colNo<<"\n";
													return T_POW_EQUAL;
												}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1266 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);		
													colNo += strlen(yytext);
													outlex<<"print() "<<lineNo<<" "<<colNo<<"\n";
													return T_PRINT;
												}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1276 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"private "<<lineNo<<" "<<colNo<<"\n";
													return T_PRIVATE;
												}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1286 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"public "<<lineNo<<" "<<colNo<<"\n";
													return T_PUBLIC;
												}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1296 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"protected "<<lineNo<<" "<<colNo<<"\n";
													return T_PROTECTED;
												}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1306 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"require() "<<lineNo<<" "<<colNo<<"\n";
													return T_REQUIRE;
												}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1316 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"require_once "<<lineNo<<" "<<colNo<<"\n";
													return T_REQUIRE_ONCE;
												}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1326 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"return "<<lineNo<<" "<<colNo<<"\n";
													return T_RETURN;
												}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1336 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"<< "<<lineNo<<" "<<colNo<<"\n";
													return T_SL;
												}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1346 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"<<= "<<lineNo<<" "<<colNo<<"\n";
													return T_SL_EQUAL;
												}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1356 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<">> "<<lineNo<<" "<<colNo<<"\n";
													return T_SR;
												}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 1366 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<">> "<<lineNo<<" "<<colNo<<"\n";
													return T_SR_EQUAL;
												}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 1376 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<">>> "<<lineNo<<" "<<colNo<<"\n";
													return T_START_HEREDOC;
												}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1386 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"static "<<lineNo<<" "<<colNo<<"\n";
													return T_STATIC;
												}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 1396 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"(string) "<<lineNo<<" "<<colNo<<"\n";
													return T_STRING_CAST;
												}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1406 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"switch "<<lineNo<<" "<<colNo<<"\n";
													return T_SWITCH;
												}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 1416 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"throw "<<lineNo<<" "<<colNo<<"\n";
													return T_THROW;
												}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 1426 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"trait "<<lineNo<<" "<<colNo<<"\n";
													return T_TRAIT;
												}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 1436 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"__TRAIT__ "<<lineNo<<" "<<colNo<<"\n";
													return T_TRAIT_C;
												}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 1446 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"try "<<lineNo<<" "<<colNo<<"\n";
													return T_TRY;
												}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 1456 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"unset() "<<lineNo<<" "<<colNo<<"\n";
													return T_UNSET;
												}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 1466 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"(unset) "<<lineNo<<" "<<colNo<<"\n";
													return T_UNSET_CAST;
												}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 1476 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"ues "<<lineNo<<" "<<colNo<<"\n";
													return T_USE;
												}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 1486 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"var "<<lineNo<<" "<<colNo<<"\n";
													return T_VAR;
												}
	YY_BREAK
case 183:
#line 1497 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 184:
#line 1498 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 185:
#line 1499 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 186:
#line 1500 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 187:
#line 1501 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 188:
#line 1502 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 189:
#line 1503 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 190:
#line 1504 "D:\\Compiler\\CMP\\Compiler\\lex.l"
case 191:
YY_RULE_SETUP
#line 1504 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"Type "<<lineNo<<" "<<colNo<<"\n";
													return T_TYPE;
												}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 1514 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"variable "<<lineNo<<" "<<colNo<<"\n";
													return T_VARIABLE;
												}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 1524 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"while "<<lineNo<<" "<<colNo<<"\n";
													return T_WHILE;
												}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 1534 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"^= "<<lineNo<<" "<<colNo<<"\n";
													return T_XOR_EQUAL;
												}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 1544 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"yield "<<lineNo<<" "<<colNo<<"\n";
													return T_YIELD;
												}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 1555 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"String "<<lineNo<<" "<<colNo<<"\n";
													return T_STRING;
												}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 1565 "D:\\Compiler\\CMP\\Compiler\\lex.l"
{	yylval.r.myLineNo= lineNo;
													yylval.r.myColNo = colNo;
													yylval.r.str = new char[255];
													yylval.r.str[0] = '\0';
													strcat(yylval.r.str, yytext);
													colNo += strlen(yytext);
													outlex<<"UNPHPCODE "<<lineNo<<" "<<colNo<<"\n";
												}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 1573 "D:\\Compiler\\CMP\\Compiler\\lex.l"
ECHO;
	YY_BREAK
#line 3138 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(multilinecomment):
case YY_STATE_EOF(DOCmultilinecomment):
case YY_STATE_EOF(String_Double):
case YY_STATE_EOF(String_Single):
case YY_STATE_EOF(PHP):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 635 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 635 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 634);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 1573 "D:\\Compiler\\CMP\\Compiler\\lex.l"
